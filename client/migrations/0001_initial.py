# Generated by Django 3.2.16 on 2023-09-14 10:39

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('addressline1', models.CharField(blank=True, max_length=128)),
                ('addressline2', models.CharField(blank=True, max_length=128)),
                ('addressline3', models.CharField(blank=True, max_length=128)),
                ('City', models.CharField(blank=True, max_length=128)),
                ('State', models.CharField(blank=True, max_length=128)),
                ('Country', models.CharField(blank=True, max_length=128)),
                ('Zipcode', models.CharField(blank=True, max_length=128)),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('official_name', models.CharField(max_length=128, unique=True, verbose_name='Client Name')),
                ('comman_name', models.CharField(blank=True, max_length=128, verbose_name='Comman Name')),
                ('parent_company', models.CharField(blank=True, max_length=128, verbose_name='Parent Company')),
                ('former_name', models.CharField(blank=True, max_length=128, verbose_name='Former Name')),
                ('slug', models.SlugField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='Plant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plant_name', models.CharField(blank=True, max_length=128, verbose_name='Plant Name')),
                ('plant_common_name', models.CharField(blank=True, max_length=128, verbose_name='Plant Common Name')),
                ('contact_person', models.CharField(blank=True, max_length=128, verbose_name='Contact Person')),
                ('contact_person_phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, region=None, verbose_name='Contact Person Phone')),
                ('contact_person_email', models.EmailField(blank=True, max_length=128, verbose_name='Contact Person Email')),
                ('country', django_countries.fields.CountryField(blank=True, default='', max_length=2, null=True)),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='clientplant+', to='client.client')),
                ('official_address', models.ManyToManyField(blank=True, related_name='official_address', to='client.Address', verbose_name='Official Adrress')),
                ('plantentrance_address', models.ManyToManyField(blank=True, related_name='plantentrance_address', to='client.Address', verbose_name='Plant Entrance Address')),
                ('shipping_address', models.ManyToManyField(blank=True, related_name='shipping_address', to='client.Address', verbose_name='Shipping Address')),
            ],
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_of_unit', models.CharField(blank=True, max_length=128, verbose_name='Name Of Unit')),
                ('chemical_being_manufactured_by_this_unit', models.CharField(blank=True, max_length=128, verbose_name='Chemical Being Manufactured By This Unit')),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='clientunit+', to='client.client')),
                ('plant', models.ForeignKey(blank=True, default='', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='unitplant', to='client.plant')),
            ],
        ),
        migrations.CreateModel(
            name='Reactor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reactor_name', models.CharField(blank=True, max_length=128, verbose_name='Reactor Name')),
                ('tube_id', models.CharField(blank=True, choices=[('INCH', 'INCH'), ('MM', 'MM')], max_length=128, null=True, verbose_name='Tube ID unit')),
                ('input_tubeid', models.DecimalField(blank=True, decimal_places=3, max_digits=999, null=True, verbose_name='Tube ID value')),
                ('is_there_ferrule_insert_in_tube', models.CharField(blank=True, choices=[('YES', 'YES'), ('NO', 'NO')], max_length=128, null=True, verbose_name='Is There Ferrule Insert In Tube?')),
                ('ferrule_length', models.CharField(blank=True, choices=[('INCH', 'INCH'), ('MM', 'MM')], max_length=128, null=True, verbose_name='Ferrule length unit')),
                ('input_ferrulelength', models.DecimalField(blank=True, decimal_places=3, max_digits=999, null=True, verbose_name='ferrule length value')),
                ('ferrule_id', models.CharField(blank=True, choices=[('INCH', 'INCH'), ('MM', 'MM')], max_length=128, null=True, verbose_name='Ferrule ID unit')),
                ('input_ferruleid', models.DecimalField(blank=True, decimal_places=3, max_digits=999, null=True, verbose_name='Ferrule ID Value')),
                ('tube_material_of_tubes', models.PositiveIntegerField(blank=True, null=True, verbose_name='Number of Tubes')),
                ('tube_material_of_raws', models.PositiveIntegerField(blank=True, null=True, verbose_name='Number of Rows')),
                ('tube_material_of_thermo', models.PositiveIntegerField(blank=True, null=True, verbose_name='Number of Thermo')),
                ('tube_material_of_supports', models.PositiveIntegerField(blank=True, null=True, verbose_name='Number of Supports')),
                ('tube_material_of_plugs', models.PositiveIntegerField(blank=True, null=True, verbose_name='Number of Plugs')),
                ('tube_material_of_coolent_tubes', models.PositiveIntegerField(blank=True, null=True, verbose_name='Number of coolant Tubes')),
                ('tube_spacing_or_pitch', models.CharField(blank=True, choices=[('INCH', 'INCH'), ('MM', 'MM')], max_length=128, null=True, verbose_name='Tube Spacing or Pitch Unit')),
                ('input_tubespacing', models.DecimalField(blank=True, decimal_places=3, max_digits=999, null=True, verbose_name='Tube Spacing or Pitch Value')),
                ('total_tube_length', models.CharField(blank=True, choices=[('INCH', 'INCH'), ('MM', 'MM')], max_length=128, null=True, verbose_name='Total Tube Length Unit')),
                ('input_totaltube', models.DecimalField(blank=True, decimal_places=3, max_digits=999, null=True, verbose_name='Total Tube Length Value')),
                ('top_tube_sheet_thickness', models.CharField(blank=True, choices=[('INCH', 'INCH'), ('MM', 'MM')], max_length=128, null=True, verbose_name='Top Tube Sheet Thickness Unit')),
                ('input_toptube', models.DecimalField(blank=True, decimal_places=3, max_digits=999, null=True, verbose_name='Top Tube Sheet Thickness Value')),
                ('bottom_tube_sheet_thickness', models.CharField(blank=True, choices=[('INCH', 'INCH'), ('MM', 'MM')], max_length=128, null=True, verbose_name='Bottom Tube Sheet Thickness Unit')),
                ('input_bottomtube', models.DecimalField(blank=True, decimal_places=3, max_digits=999, null=True, verbose_name='Bottom Tube Sheet Thickness Value')),
                ('tube_protude_out_of_top_tube_sheet', models.CharField(blank=True, choices=[('YES', 'YES'), ('NO', 'NO')], max_length=128, null=True, verbose_name='Tube Protude Out Of Top Tube Sheet')),
                ('select_tube_protude_top', models.CharField(blank=True, choices=[('INCH', 'INCH'), ('MM', 'MM')], default='', max_length=128, null=True, verbose_name='Tube Protude Top Unit')),
                ('input_tubeprotude_top', models.DecimalField(blank=True, decimal_places=3, max_digits=999, null=True, verbose_name='Tube Protude Top Value')),
                ('tube_protude_out_of_bottom_tube_sheet', models.CharField(blank=True, choices=[('YES', 'YES'), ('NO', 'NO')], max_length=128, null=True, verbose_name='Tube Protude Out Of Bottom Tube Sheet')),
                ('select_tube_protude_bottom', models.CharField(blank=True, choices=[('INCH', 'INCH'), ('MM', 'MM')], default='', max_length=128, null=True, verbose_name='Tube Protude Out Of Bottom Tube Sheet Unit')),
                ('input_tubeprotude_bottom', models.DecimalField(blank=True, decimal_places=3, max_digits=999, null=True, verbose_name='Tube Protude Out Of Bottom Tube Sheet Value')),
                ('top_dome_removable', models.CharField(blank=True, choices=[('YES', 'YES'), ('NO', 'NO')], max_length=128, null=True, verbose_name='Top Dome Removable')),
                ('top_inlet_accessible', models.CharField(blank=True, choices=[('YES', 'YES'), ('NO', 'NO')], max_length=128, null=True, verbose_name='Top Inlet Accessible')),
                ('top_inlet_impingment_plate', models.CharField(blank=True, choices=[('YES', 'YES'), ('NO', 'NO')], max_length=128, null=True, verbose_name='Top Inlet Impingment Plate')),
                ('any_projections_on_tube_sheet_describe', models.CharField(blank=True, max_length=128, null=True, verbose_name='Any projections on tube sheet-describe')),
                ('tube_sheet_material', models.CharField(blank=True, max_length=128, verbose_name='Tube Sheet Material')),
                ('dom_material', models.CharField(blank=True, max_length=128, validators=[django.core.validators.MaxLengthValidator(200)], verbose_name='DOME')),
                ('tube_spacing_proof_document', models.FileField(blank=True, null=True, upload_to='document/', verbose_name='Tube Spacing Proof Document')),
                ('reactor_tube_sheet_drawings', models.FileField(blank=True, null=True, upload_to='images/', verbose_name='Reactor Tube Sheet Drawings')),
                ('reactor_elevation_view_drawings', models.FileField(blank=True, null=True, upload_to='images/', verbose_name='Reactor Elevation View Drawings')),
                ('other_drawings', models.FileField(blank=True, null=True, upload_to='images/', verbose_name='Other Drawings')),
                ('catalyst_name', models.CharField(blank=True, max_length=128)),
                ('model_number', models.CharField(blank=True, max_length=128)),
                ('manufacturer', models.CharField(blank=True, max_length=128)),
                ('shape', models.CharField(blank=True, choices=[('TQ', 'TQ'), ('TABLET', 'TABLET'), ('EXTRADIET', 'EXTRADIET'), ('CYLINDER', 'CYLINDER'), ('PENTERING_CYLINDER', 'PENTERING_CYLINDER'), ('SPHERE', 'SPHERE'), ('OTHER', 'OTHER')], default='TQ', max_length=20)),
                ('length', models.CharField(blank=True, max_length=128)),
                ('width', models.CharField(blank=True, max_length=128)),
                ('height', models.CharField(blank=True, max_length=128)),
                ('inner_diameter', models.CharField(blank=True, max_length=128)),
                ('outer_diameter', models.CharField(blank=True, max_length=128)),
                ('crush_strength', models.CharField(blank=True, max_length=128)),
                ('MSDS', models.FileField(blank=True, null=True, upload_to='MSDS_files/')),
                ('catalyst_to_be_loaded', models.CharField(blank=True, max_length=128)),
                ('layers_of_catalyst', models.CharField(blank=True, max_length=128)),
                ('layers_of_inerts', models.CharField(blank=True, max_length=128)),
                ('tube_loading_profile_drawing', models.FileField(blank=True, null=True, upload_to='tube_loading_profile_drawings/', verbose_name='Tube Loading Profile Drawings')),
                ('loaded_tube_length_in', models.CharField(blank=True, max_length=128)),
                ('loaded_tube_length_mm', models.CharField(blank=True, max_length=128)),
                ('tube_bottom_retainer', models.CharField(blank=True, choices=[('SPRING', 'SPRING'), ('WIREMESH', 'WIREMESH'), ('OTHER', 'OTHER')], default='SPRING', max_length=20, null=True)),
                ('top_spring', models.BooleanField(blank=True, choices=[(True, 'yes'), (False, 'No')], default='True', verbose_name='top_spring')),
                ('spring_height', models.CharField(blank=True, max_length=128)),
                ('spring_drawing', models.FileField(blank=True, null=True, upload_to='spring_drawing/')),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reactorclient+', to='client.client')),
                ('plant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reactorplant+', to='client.plant')),
                ('unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reactorunit+', to='client.unit')),
            ],
        ),
    ]
